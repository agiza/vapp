<?php

/**
 * @file
 * Provides usage estimate table based on user's activities.
 * Works with Cloud module.
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */

module_load_include('inc', 'cloud'        , 'cloud_constants'        );
module_load_include('inc', 'cloud_billing', 'cloud_billing_constants');
module_load_include('inc', 'cloud_billing', 'cloud_billing'          );
module_load_include('inc', 'cloud_billing', 'cloud_billing_db'       );


/**
 * Implementation of hook_help().
 */
function cloud_billing_help($section) {
  switch ($section) {
    case 'admin/help#':
      $output = '<p>' . t('The cloud module creates a user interface for users to manage clouds. Users can Create Instances,  Describe Instances etc..') . '</p>';
      return $output;
    case 'admin/content/comment':
    case 'admin/content/comment/create':
      return '<p>' . t("Below is a list of the latest comments posted to your site. Click on a subject to see the comment,  the author's name to edit the author's user information ,  'edit' to modify the text,  and 'delete' to remove their submission.") . '</p>';
    case 'admin/content/comment/approval':
      return '<p>' . t("Below is a list of the comments posted to your site that need approval. To approve a comment,  click on 'edit' and then change its 'moderation status' to Approved. Click on a subject to see the comment,  the author's name to edit the author's user information,  'edit' to modify the text,  and 'delete' to remove their submission.") . '</p>';
    case 'admin/content/comment/settings':
      return '<p>' . t("Comments can be attached to any node,  and their settings are below. The display comes in two types: a 'flat list' where everything is flush to the left side,  and comments come in chronological order,  and a 'threaded list' where replies to other comments are placed immediately below and slightly indented,  forming an outline. They also come in two styles: 'expanded',  where you see both the title and the contents,  and 'collapsed' where you only see the title. Preview comment forces a user to look at their comment by clicking on a 'Preview' button before they can actually add the comment.") . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function cloud_billing_menu() {

  $items = array();

  $cloud_list      = cloud_get_all_clouds();
  $cloud_name_list = cloud_get_all_clouds_display_name();

  $items['reports'] = array(
    'title' => 'Report',
    'description' => 'Usage Estimate Reports',
    'page callback' => '_cloud_billing_usage_estimate',
    'access arguments' => array('access report'),
    'weight' => -1,
    'file' => '',
  );
  $items['reports/usage_estimate'] = array(
    'title' => 'Usage Estimate',
    'description' => 'Usage Estimate Reports',
    'page callback' => '_cloud_billing_usage_estimate',
    'access arguments' => array('access report'),
    'weight' => 0,
    'file' => '',
  );
  $items['reports/usage_estimate/%/%/details/all'] = array(
    'title' => 'Usage Estimate Details',
    'description' => 'Usage Estimate Reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_billing_report_details', 2, 3, 'all'),
    'access arguments' => array('access usage estimate'),
    'type' => MENU_NORMAL_ITEM,
    'file' => '',
  );

  foreach ($cloud_list as $cloud_context) {
    $items['reports/usage_estimate/' . $cloud_context] = array(
      'title' => $cloud_name_list[$cloud_context],
      'description' => $cloud_name_list[$cloud_context],
      'page callback' => '_cloud_billing_usage_estimate',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' access report'),
      'weight' => 2,
      'file' => '',
    );
    $items['reports/usage_estimate/%/%/details/' . $cloud_context] = array(
      'title' => 'Usage Estimate Details',
      'description' => 'Usage Estimate Reports',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cloud_billing_report_details', 2, 3, $cloud_context),
      'access arguments' => array('access usage estimate'),
      'type' => MENU_CALLBACK,
      'file' => '',
    );
  }
  return $items;
}


/**
 * Implementation of hook_permission().
 */
function cloud_billing_permission() {
  return array(
    'access usage estimate' => array(
      'title' => t('access usage estimate'  ),
      'description' => t('Permission to access usage estimates'),
    ),
    'access report' => array(
      'title' => t('access report'),
      'description' => t('Permission to access reports'),
    ),
  );  
}

/**
 * Implements hook_theme().
 */
function cloud_billing_theme() {
  return array(
    'cloud_billing_report' => array(
      'render element' => 'form',
      'file' => 'cloud_billing.inc',
    ),
    'cloud_billing_report_details' => array(
      'render element' => 'form',
      'file' => 'cloud_billing.inc',
    ),
  );
}

/**
 *  Implementation of hook_cloud_delete()
 */
function cloud_billing_cloud_delete($cloud_name) {
  _cloud_billing_delete_data($cloud_name);
}


/**
 * Implementing of hook_cron()
 */

function cloud_billing_cron() {
  _cloud_billing_syncronize_records();
}
